package mythruna.es.sql;

import org.progeeks.util.log.Log;

import java.sql.*;
import java.util.HashMap;
import java.util.Map;

public class StringTable {
    static Log log = Log.getLog();

    private String tableName = "STRINGS";
    private boolean cached = true;
    private String insertSql;
    private String idForString;
    private String stringForId;

    protected StringTable(SqlSession session)
            throws SQLException {
        initialize(session);

        this.idForString = "select id from STRINGS where val=?";
        this.stringForId = "select val from STRINGS where id=?";
        this.insertSql = new StringBuilder().append("insert into ").append(this.tableName).append(" (id,val) values (default,?)").toString();
    }

    public static StringTable create(SqlSession session) throws SQLException {
        return new StringTable(session);
    }

    protected void initialize(SqlSession session)
            throws SQLException {
        DatabaseMetaData md = session.getConnection().getMetaData();

        System.out.println(new StringBuilder().append("Checking for table:").append(this.tableName).toString());
        ResultSet rs = md.getColumns(null, "PUBLIC", this.tableName, null);
        Map dbFields = new HashMap();
        try {
            while (rs.next()) {
                dbFields.put(rs.getString("COLUMN_NAME"), Integer.valueOf(rs.getInt("DATA_TYPE")));
            }
        } finally {
            rs.close();
        }

        System.out.println(new StringBuilder().append("dbFields for ").append(this.tableName).append(" :").append(dbFields).toString());
        if (!dbFields.isEmpty()) {
            checkStructure(dbFields);
            return;
        }

        StringBuilder sb = new StringBuilder("CREATE");
        if (this.cached)
            sb.append(" CACHED");
        sb.append(" TABLE");

        sb.append(new StringBuilder().append(" ").append(this.tableName).append("\n").toString());
        sb.append("(\n");
        sb.append("  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY");
        sb.append(",\n  val VARCHAR(50)");
        sb.append(",\n  CONSTRAINT val_key UNIQUE (val)");
        sb.append("\n)");

        System.out.println(new StringBuilder().append("Create statement:\n").append(sb).toString());

        Statement st = session.getConnection().createStatement();
        int i = st.executeUpdate(sb.toString());
        st.close();

        System.out.println(new StringBuilder().append("Result:").append(i).toString());
    }

    protected void checkStructure(Map<String, Integer> dbFields) throws SQLException {
    }

    protected int lookupString(SqlSession session, String s) throws SQLException {
        System.out.println(new StringBuilder().append("executing query:").append(this.idForString).toString());
        PreparedStatement st = session.prepareStatement(this.idForString);
        st.setObject(1, s);
        ResultSet rs = st.executeQuery();
        try {
            Integer i;
            if (rs.next()) {
                i = (Integer) rs.getObject(1);
                return i.intValue();
            }
            return -1;
        } finally {
            rs.close();
        }
    }

    protected int addString(SqlSession session, String s) throws SQLException {
        System.out.println(new StringBuilder().append("Executing:").append(this.insertSql).toString());
        PreparedStatement st = session.prepareStatement(this.insertSql, 1);
        st.setObject(1, s);
        int count = st.executeUpdate();
        System.out.println(new StringBuilder().append("count:").append(count).toString());
        ResultSet keys = st.getGeneratedKeys();
        try {
            if (keys.next()) {
                Integer i = (Integer) keys.getObject(1);
                System.out.println(new StringBuilder().append("Generated key: ").append(i).toString());
                return i.intValue();
            }
            throw new RuntimeException(new StringBuilder().append("Failed to add string:").append(s).toString());
        } finally {
            keys.close();
        }
    }

    public int getStringId(SqlSession session, String s, boolean add) throws SQLException {
        System.out.println(new StringBuilder().append("db.getStringId(").append(s).append(", ").append(add).append(")").toString());

        int result = lookupString(session, s);
        System.out.println(new StringBuilder().append("Result from lookup:").append(result).toString());
        if ((result == -1) && (add)) {
            result = addString(session, s);
            System.out.println(new StringBuilder().append("result from add:").append(result).toString());
        }

        return result;
    }

    public String getString(SqlSession session, int id) throws SQLException {
        PreparedStatement st = session.prepareStatement(this.stringForId);
        st.setObject(1, Integer.valueOf(id));
        ResultSet rs = st.executeQuery();
        try {
            String s;
            if (rs.next()) {
                s = (String) rs.getObject(1);
                return s;
            }
            return null;
        } finally {
            rs.close();
        }
    }
}