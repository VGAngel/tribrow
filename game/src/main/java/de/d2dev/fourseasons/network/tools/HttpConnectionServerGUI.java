/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HttpConnectionServerGUI.java
 *
 * Created on 19.08.2011, 14:09:21
 */

package de.d2dev.fourseasons.network.tools;

import java.net.InetAddress;
import java.util.Vector;

import javax.swing.DefaultListModel;
import javax.swing.UIManager;

import nu.xom.Document;
import nu.xom.Element;

import com.ning.http.client.Response;

import de.d2dev.fourseasons.network.*;

/**
 *
 * @author Sebastian Bordt
 */
public class HttpConnectionServerGUI extends javax.swing.JFrame implements ConnectionServerListener {
	
	private HttpConnectionServer connectionServer = null;
	private DefaultListModel serversListModel = new DefaultListModel();

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	/** Creates new form HttpConnectionServerGUI */
    public HttpConnectionServerGUI() {
        initComponents();
        
        this.serversList.setModel( this.serversListModel );
    }
    
	@Override
	public void onAddServer(ServerDescription server) {
		this.serversListModel.addElement(server);
	}

	@Override
	public void onRemoveServer(ServerDescription server) {
		this.serversListModel.removeElement(server);
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        urlTextField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        getServersButton = new javax.swing.JButton();
        addServerButton = new javax.swing.JButton();
        removeServerButton = new javax.swing.JButton();
        runTestButton = new javax.swing.JButton();
        clearLogButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        serversList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Http Connection Server GUI");

        logTextArea.setColumns(20);
        logTextArea.setEditable(false);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("URL:"));

        urlTextField.setText("http://home.in.tum.de/~bordt/html-data/d2dev/connectionServer/connectionServer.php");

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(urlTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(urlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(connectButton))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Send Requests"));

        getServersButton.setText("GetServers");
        getServersButton.setPreferredSize(new java.awt.Dimension(150, 0));
        getServersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getServersButtonActionPerformed(evt);
            }
        });

        addServerButton.setText("Add Server");
        addServerButton.setPreferredSize(new java.awt.Dimension(150, 0));
        addServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addServerButtonActionPerformed(evt);
            }
        });

        removeServerButton.setText("Remove Server");
        removeServerButton.setPreferredSize(new java.awt.Dimension(150, 0));
        removeServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeServerButtonActionPerformed(evt);
            }
        });

        runTestButton.setText("Run server test");
        runTestButton.setPreferredSize(new java.awt.Dimension(150, 0));
        runTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runTestButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(getServersButton, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addGap(21, 21, 21)
                .addComponent(addServerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(removeServerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(runTestButton, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(getServersButton, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
            .addComponent(addServerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
            .addComponent(removeServerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
            .addComponent(runTestButton, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        clearLogButton.setText("Clear Log");
        clearLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLogButtonActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Servers:"));

        serversList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(serversList);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(clearLogButton, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearLogButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
    	// Discard the old server
    	if ( this.connectionServer != null ) {
    		this.connectionServer.removeListener( this );
    		this.logTextArea.append("Disconnected.\n");
    	}
    	
    	// Connect to the new server
    	this.connectionServer = new HttpConnectionServer( this.urlTextField.getText() );
    	this.connectionServer.addListener( this );
    	
    	this.logTextArea.append("Connected to '" + this.urlTextField.getText() + "'\n");
 
    	// Clear servers list
    	this.serversListModel.removeAllElements();
    }//GEN-LAST:event_connectButtonActionPerformed

    private void getServersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getServersButtonActionPerformed
    	if ( this.connectionServer == null ) {
    		this.logTextArea.append("Not connected.\n");
    		return;
    	}
    		
    	if ( !this.connectionServer.pendingGetServers() ) {
    		try {
    			this.logTextArea.append("Sending getServers request...\n");
    			
				Response response = this.connectionServer.sendGetServersRequest().get();
				
				this.logTextArea.append("Response:\n");
				this.logTextArea.append( response.getResponseBody().replace('\n', ' ').replaceAll("\\s\\s+\\s*", "") );
				this.logTextArea.append("\n");
			} catch (Exception e) {
				this.logTextArea.append("An exception occured.\n");
				this.logTextArea.append( e.getMessage() );
			}
    	}
    }//GEN-LAST:event_getServersButtonActionPerformed

    private void addServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addServerButtonActionPerformed
    	if ( this.connectionServer == null ) {
    		this.logTextArea.append("Not connected.\n");
    		return;
    	}
    	
    	RegisterServerDialog dialog = new RegisterServerDialog(this, true);
    	dialog.setBounds( this.getX() + (this.getWidth() - dialog.getWidth()) / 2, this.getY() + (this.getHeight() - dialog.getHeight())/2, dialog.getWidth(), dialog.getHeight() );
    	dialog.setVisible(true);
    	
    	if ( dialog.server != null ) {
    		
    		try {
    			this.logTextArea.append("Sending registerServer request...\n");
    			this.logTextArea.append( dialog.server.toString().replace('\n', ' ').replaceAll("\\s\\s+\\s*", "") );
    			this.logTextArea.append("\n");
        		
    			Response response = this.connectionServer.sendAddServerRequest( dialog.server ).get();
    			
				this.logTextArea.append("Response:\n");
				this.logTextArea.append( response.getResponseBody().replace('\n', ' ').replaceAll("\\s\\s+\\s*", "") );
				this.logTextArea.append("\n");
			} catch (Exception e) {
				this.logTextArea.append("An exception occured.\n");
				this.logTextArea.append( e.getMessage() );
			}
    	}
    }//GEN-LAST:event_addServerButtonActionPerformed

    private void removeServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeServerButtonActionPerformed
    	int selected = this.serversList.getSelectedIndex();
    	
    	if (selected != -1) {
    		ServerDescription server = this.connectionServer.getServers().get( selected );
    		
    		try {
    			this.logTextArea.append("Sending removeServer request...\n");
    			this.logTextArea.append( server.toString().replace('\n', ' ').replaceAll("\\s\\s+\\s*", "") );
    			this.logTextArea.append("\n");
    			
    			Response response = this.connectionServer.sendRemoveServerRequest(server).get();
    			
				this.logTextArea.append("Response:\n");
				this.logTextArea.append( response.getResponseBody().replace('\n', ' ').replaceAll("\\s\\s+\\s*", "") );
				this.logTextArea.append("\n");
			} catch (Exception e) {
				this.logTextArea.append("An exception occured.\n");
				this.logTextArea.append( e.getMessage() );
			}
    	}
    }//GEN-LAST:event_removeServerButtonActionPerformed

    private void clearLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLogButtonActionPerformed
        this.logTextArea.setText("");
    }//GEN-LAST:event_clearLogButtonActionPerformed

    private void runTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runTestButtonActionPerformed
    	if ( this.connectionServer == null ) {
    		this.logTextArea.append("Not connected.\n");
    		return;
    	}
    	
    	try {
    		// remove all registered servers
			this.logTextArea.append("Testing server...\n");
			this.logTextArea.append("Trying to remove all registered servers...\n");
			
			this.connectionServer.sendGetServersRequest().get();
			
			while ( !this.connectionServer.getServers().isEmpty() ) {
				ServerDescription server = this.connectionServer.getServers().get(0);
				
				Response response = this.connectionServer.sendRemoveServerRequest(server).get();
				
				if ( !HttpConnectionServer.succeeded(response) ) {
					this.logTextArea.append("Failed to remove server: " + server + "\n");
					
					this.logTextArea.append("Response:\n");
					this.logTextArea.append( response.getResponseBody().replace('\n', ' ').replaceAll("\\s\\s+\\s*", "") );
					this.logTextArea.append("\n");
					return;
				}
			}
			
			// register some servers
			Vector<ServerDescription> register_servers = new Vector<ServerDescription>();
			
			for (int i=0; i<5; i++) {
				Element xml = new Element("data");
				Element child = new Element("child");
				child.appendChild("Hallo");
				xml.appendChild(child);
				
				register_servers.add( new ServerDescription( InetAddress.getByName("127.0.0."+i), i, new Document(xml) ) );
			}
			
			this.logTextArea.append("Trying to register some servers...\n");
			
			for (ServerDescription s : register_servers) {
				Response response = this.connectionServer.sendAddServerRequest(s).get();
				
				if ( !HttpConnectionServer.succeeded(response) ) {
					this.logTextArea.append("Failed to register server: " + s + "\n");
					
					this.logTextArea.append("Response:\n");
					this.logTextArea.append( response.getResponseBody().replace('\n', ' ').replaceAll("\\s\\s+\\s*", "") );
					this.logTextArea.append("\n");
					return;
				}
			}
			
			this.connectionServer.sendGetServersRequest().get();
			Vector<ServerDescription> servers = new Vector<ServerDescription>( this.connectionServer.getServers() );
			
			if ( !servers.containsAll(register_servers) || !register_servers.containsAll(servers) ) {
				this.logTextArea.append("Server did not register all servers!\n");
				return;				
			}
			
			this.logTextArea.append("Test succeeded :-)\n");
		} catch (Exception e) {
			this.logTextArea.append("An exception occured.\n");
			this.logTextArea.append( e.getMessage() );
		}
    }//GEN-LAST:event_runTestButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
    	try  
    	{  
    	  //Tell the UIManager to use the platform look and feel  
    	  UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());  
    	}  
    	catch(Exception e)  
    	{  
    	  //Do nothing  
    	}  
    	
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HttpConnectionServerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addServerButton;
    private javax.swing.JButton clearLogButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton getServersButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton removeServerButton;
    private javax.swing.JButton runTestButton;
    private javax.swing.JList serversList;
    private javax.swing.JTextField urlTextField;
    // End of variables declaration//GEN-END:variables

}
